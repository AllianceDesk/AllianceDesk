@model IEnumerable<ASI.Basecode.Services.ServiceModels.TicketViewModel>

@{
    ViewData["Title"] = "Tickets";
    Layout = "_Layout";

}

@section styles {
    <link rel="stylesheet" href="~/css/functionalities.css" />
    <link rel="stylesheet" href="~/css/Admin.css" />
}

@Html.Partial("Admin_Header")
<div class="main">
    @Html.Partial("Admin_Sidebar")
    <div class="admin-body py-3 relative bg-grey">
        <h2>Tickets</h2>
        <div class="view-user-nav">
                <div class="agent-nav pt-4">
                    <div class="flex-Row gap-4 pl-2">
                    <p class="@(ViewBag.ShowStatus == null ? "active" : "")" >
                        <a asp-controller="Admin" asp-action="Tickets" class="@(ViewBag.ShowStatus == null ? "active_link" : "inactive_link")">All</a>
                        </p>
                    <p class="@(ViewBag.ShowStatus == "Unresolved" ? "active" : "")" >
                        <a asp-controller="Admin" asp-action="Tickets" asp-route-status="Unresolved" class="@(ViewBag.ShowStatus == "Unresolved" ? "active_link" : "inactive_link")">Unresolved</a>
                        </p>
                    <p class="@(ViewBag.ShowStatus == "Resolved" ? "active" : "")" >
                        <a asp-controller="Admin" asp-action="Tickets" asp-route-status="Resolved" class="@(ViewBag.ShowStatus == "Resolved" ? "active_link" : "inactive_link")">Resolved</a>
                        </p>
                    </div>
                </div>
            
            <div class="flex-Row gap-2 justify-content-center align-center mb-5  mt-3">
                @* <div class="input-group">
                    <button class="btn btn-outline-secondary filter_tickets remove_default" type="submit" id="button-search"><i class='bx bx-search bx-xs bx-fw' style="color: #45474B; cursor: pointer;"></i></button>
                    <input name="searchString" id="searchInput" type="text" class="form-control filter_tickets remove_default" placeholder="Search Tickets" aria-label="Search" aria-describedby="button-search">
                </div> *@
                <form asp-controller="Admin" asp-action="Tickets" method="get" id="searchForm" class="flex-Row gap-2 align-items-center justify-content-center">
                    <div class="j-search-container | flex-Row align-center justify-content-center">
                        <button class="border-0 ">
                            <i class="fa-solid fa-magnifying-glass text-1-5"></i>
                        </button>
                        <input name="searchString" id="searchInput" class="bg-transparent" type="text" placeholder="Search" value="@ViewBag.SearchString" />
                    </div>
                </form>
                <select class="form-select form-select-md filter_tickets remove_default" aria-label="Small select example">
                    <option selected>Open this select menu</option>
                    <option value="1">One</option>
                    <option value="2">Two</option>
                    <option value="3">Three</option>
                </select>
            </div>
        </div>
        <div class="flex-col rounded-md" data-tickets-container>
            @* @foreach (var item in Model)
            {
                <div onclick="window.location.href = '@Url.Action("Tickets", "Admin", new { id = item.TicketId })'" class="agents p-y-2 p-x-2 flex-col mb-3 rounded-2 pointer_cursor">

                        <div class="d-flex justify-content-between">
                            <h5>@item.Title</h5>
                            <p class="mt-1">@item.RelativeTime</p>
                        </div>
                        
                </div>
            } *@
        </div>
        <div class="agents-container bg-white" id="agents-container"></div>
        <div class="pagination-container justify-content-center" data-pagination-container>
            <button id="first-page" disabled><i class="fa-solid fa-angles-left"></i></button>
            <button id="prev-page" disabled><i class="fa-solid fa-angle-left"></i></button>
            <span class="bg-White br-1 py-2 px-4" id="page-info"></span>
            <button id="next-page"><i class="fa-solid fa-angle-right"></i></button>
            <button id="last-page" disabled><i class="fa-solid fa-angles-right"></i></button>
        </div>
    </div>
</div>

<script>
    const teams = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model));
    console.log("TEAMS ", teams)
    const ticketsContainer = document.querySelector("[data-tickets-container]");
    const prevPageBtn = document.getElementById('prev-page');
    const nextPageBtn = document.getElementById('next-page');
    const firstPageBtn = document.getElementById('first-page');
    const lastPageBtn = document.getElementById('last-page');
    const pageInfo = document.getElementById('page-info');
    const pagenationCtnr = document.querySelector('[data-pagination-container]')

    const usersPerPage = 10;
    let currentPage = 1;


    /* PAGINATION */

    function updatePaginationControls() {
        const totalPages = Math.ceil(teams.length / usersPerPage);

        if (totalPages == 1) {
            pagenationCtnr.classList.add('hidden')
        }

        prevPageBtn.disabled = currentPage === 1;
        firstPageBtn.disabled = currentPage === 1;
        nextPageBtn.disabled = currentPage === totalPages;
        lastPageBtn.disabled = currentPage === totalPages;
        pageInfo.textContent = `${currentPage}`;
    }

    prevPageBtn.addEventListener('click', () => {
        if (currentPage > 1) {
            currentPage--;
            renderPage(currentPage);
        }
    });

    firstPageBtn.addEventListener('click', () => {
        if (currentPage > 1) {
            currentPage = 1;
            renderPage(currentPage);
        }
    });

    lastPageBtn.addEventListener('click', () => {
        const totalPages = Math.ceil(teams.length / usersPerPage);
        if (currentPage < totalPages) {
            currentPage = totalPages;
            renderPage(currentPage);
        }
    });

    nextPageBtn.addEventListener('click', () => {
        const totalPages = Math.ceil(teams.length / usersPerPage);
        if (currentPage < totalPages) {
            currentPage++;
            renderPage(currentPage);
        }
    });

    function renderPage(page) {
        ticketsContainer.innerHTML = '';
        const start = (page - 1) * usersPerPage;
        const end = start + usersPerPage;
        const usersToShow = teams.slice(start, end);

        if (usersToShow.length > 0) {
            usersToShow.forEach(item => {
                const userDiv = document.createElement('div');
                userDiv.classList.add('agents', 'cursor-pointer', 'p-y-2', 'p-x-2', 'flex-col', 'mb-3', 'rounded-2');
                userDiv.dataset.agentTeamsAgent = '';
                userDiv.dataset.userId = item.TicketId;

                userDiv.innerHTML = `
                                        <div class="d-flex justify-content-between">
                                            <h5>${item.Title}</h5>
                                            <p class="mt-1">${item.RelativeTime}</p>
                                        </div>
                                    `;

                userDiv.addEventListener('click', () => {
                    console.log("agent clicked");
                    if (userDiv.classList.contains("selected-agent")) {
                        userDiv.classList.remove("selected-agent");
                        return;
                    }
                    userId = userDiv.getAttribute('data-user-id');
                    console.log("User Id", userId);
                    const url = `@Url.Action("Tickets", "Admin", new { id = "__ID__" })`.replace('__ID__', userId);
                    window.location.href = url;
                });
                ticketsContainer.appendChild(userDiv);
            });
        } else {
            ticketsContainer.innerHTML = '<p>No agents available.</p>';
        }

        updatePaginationControls();
    }

    renderPage(currentPage);
</script>