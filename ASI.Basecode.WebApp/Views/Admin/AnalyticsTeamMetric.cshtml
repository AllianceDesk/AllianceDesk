@model IEnumerable<ASI.Basecode.Services.ServiceModels.AnalyticsTeamMetricViewModel>

@{
    ViewData["Title"] = "Tickets";
    Layout = "_Layout";
}

@section styles {
    <link rel="stylesheet" href="~/css/functionalities.css" />
    <link rel="stylesheet" href="~/css/Admin.css" />
}

@Html.Partial("Admin_Header")
<div class="main">
    @Html.Partial("Admin_Sidebar")
    <div class="admin-body py-3 relative bg-grey">
        <h2>Analytics</h2>
        <div class="view-user-nav">
            <div class="agent-nav pt-4">
                <div class="flex-Row gap-4 pl-2 mb-4">
                    <a asp-action="AnalyticsOverallMetrics" data-td-none asp-controller="Admin" class="nav-item" data-ticketsall-nav-item data-status="unresolved">Overall Metrics</a>
                    <a asp-action="AnalyticsTeamMetric" data-td-none asp-controller="Admin" class="nav-item active-admin-nav" data-ticketsall-nav-item data-status="resolved">Team Metric</a>
                    <a asp-action="AgentMetric" data-td-none asp-controller="Admin" class="nav-item" data-ticketsall-nav-item data-status="resolved">Agent Metrics</a>
                </div>
            </div>
        </div>

        <div class=" | flex-Row justify-content-between gap-2 w-100" style="display: grid; grid-template-columns: 30% 70%;">
            <div class="">
                <div class="j-search-container | flex-Row align-center gap-2">
                    <i class="fa-solid fa-magnifying-glass text-1-5"></i>
                    <input id="team-search-input" class="bg-transparent" type="text" placeholder="Search" />
                </div>

                <div id="teams-list" class="flex flex-col gap-1 mt-4">
                    @foreach (var item in Model)
                    {
                        <div class="flex-Row bg-White cursor-pointer p-x-1 p-y-0-5 gap-1 align-items-center"
                             data-team-id="@item.Team.TeamId"
                             data-team-item="">
                            <div class="p-y-1 p-x-1 br-50 bg-grey"></div>
                            <h6 class="H6">@item.Team.TeamName</h6>
                        </div>
                    }
                </div>
                <div class="pagination-container justify-content-center" data-pagination-container>
                    <button style="padding: 0.1rem 0.5rem;" id="first-page" disabled><i class="fa-solid fa-angles-left"></i></button>
                    <button style="padding: 0.1rem 0.5rem;" id="prev-page" disabled><i class="fa-solid fa-angle-left"></i></button>
                    <span class="bg-White br-1 py-1 px-4" id="page-info"></span>
                    <button style="padding: 0.1rem 0.5rem;" id="next-page"><i class="fa-solid fa-angle-right"></i></button>
                    <button style="padding: 0.1rem 0.5rem;" id="last-page" disabled><i class="fa-solid fa-angles-right"></i></button>
                </div>
            </div>

            <div class="flex flex-col gap-2">
                <div class="bg-White p-x-0-5 p-y-0-5 br-1-5">   
                    <canvas id="LineTicketVolumeMetric"></canvas>
                </div>
                <div class="bg-White p-x-0-5 p-y-0-5 br-1-5 " style="display: grid; grid-template-columns: 0.5fr 0.5fr;">
                    <div class="bg-White p-x-0-5 p-y-0-5 br-1-5">
                        <p class="text-center">Ticket Status</p>
                        <canvas id="pieChartStatus"></canvas>
                    </div>
                    <div class="bg-White p-x-0-5 p-y-0-5 br-1-5">
                        <p class="text-center">Ticket Category</p>
                        <canvas id="pieChartCategory"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        $(document).ready(function () {
            const teams = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model));

            console.log("TEAMS", teams);
            const paginationContainer = document.querySelector('.pagination-container');
            const prevPageBtn = document.getElementById('prev-page');
            const nextPageBtn = document.getElementById('next-page');
            const firstPageBtn = document.getElementById('first-page');
            const lastPageBtn = document.getElementById('last-page');
            const pageInfo = document.getElementById('page-info');

            let currentPage = 1;
            const teamsPerPage = 10;
            let filteredTeams = teams;

            function updatePaginationControls() {
                const totalPages = Math.ceil(filteredTeams.length / teamsPerPage);
                console.log("TOTAL PAGES ", totalPages);

                prevPageBtn.disabled = currentPage === 1;
                firstPageBtn.disabled = currentPage === 1;
                nextPageBtn.disabled = currentPage === totalPages;
                lastPageBtn.disabled = currentPage === totalPages;
                pageInfo.textContent = `${currentPage}`;
            }

            function renderTeams(teamsToRender) {
                const teamsList = document.getElementById('teams-list');
                teamsList.innerHTML = '';
                const startIndex = (currentPage - 1) * teamsPerPage;
                const endIndex = startIndex + teamsPerPage;
                const teamsToShow = teamsToRender.slice(startIndex, endIndex);

                teamsToShow.forEach(team => {
                    const teamDiv = document.createElement('div');
                    teamDiv.classList.add('flex-Row', 'bg-White', 'cursor-pointer', 'p-x-1', 'p-y-0-5', 'gap-2', 'align-items-center');
                    teamDiv.dataset.teamId = team.Team.TeamId;
                    teamDiv.dataset.teamItem = '';
                    teamDiv.innerHTML = `
                            <div class="p-y-1 p-x-1 br-50 bg-grey"></div>
                            <h6 class="H6">${team.Team.TeamName}</h6>
                        `;
                    teamsList.appendChild(teamDiv);
                });

                const teamItems = document.querySelectorAll('[data-team-item]');
                teamItems.forEach(item => {
                    item.addEventListener('click', () => {
                        teamItems.forEach(teamItem => {
                            teamItem.classList.remove('selected-agent');
                        });
                        item.classList.add('selected-agent');
                        const teamId = item.dataset.teamId;

                        const teamActive = teams.find(team => team.Team.TeamId === teamId);

                        if (teamActive) {
                            const ticketVolume = teamActive.TicketCountsByPriority;
                            const ticketStatus = teamActive.TicketCountsByStatus;
                            const ticketCategory = teamActive.TicketCountsByCategory;

                            updateCharts(ticketVolume, ticketStatus, ticketCategory);
                        }
                    });
                });
                updatePaginationControls();
            }

            // Event listeners for pagination buttons
            prevPageBtn.addEventListener('click', () => {
                if (currentPage > 1) {
                    currentPage--;
                    renderTeams(filteredTeams);
                }
            });

            firstPageBtn.addEventListener('click', () => {
                if (currentPage > 1) {
                    currentPage = 1;
                    renderTeams(filteredTeams);
                }
            });

            lastPageBtn.addEventListener('click', () => {
                const totalPages = Math.ceil(filteredTeams.length / teamsPerPage);
                if (currentPage < totalPages) {
                    currentPage = totalPages;
                    renderTeams(filteredTeams);
                }
            });

            nextPageBtn.addEventListener('click', () => {
                const totalPages = Math.ceil(filteredTeams.length / teamsPerPage);
                if (currentPage < totalPages) {
                    currentPage++;
                    renderTeams(filteredTeams);
                }
            });

            function updateCharts(ticketVolume, ticketStatus, ticketCategory) {
                // Update Line Chart
                lineChart.data.datasets[0].data = [
                    ticketVolume["1star"] || 0,
                    ticketVolume["2star"] || 0,
                    ticketVolume["3star"] || 0,
                    ticketVolume["4star"] || 0,
                    ticketVolume["5star"] || 0
                ];
                lineChart.update();

                // Update Status Chart
                statusChart.data.datasets[0].data = [
                    ticketStatus["Open"] || 0,
                    ticketStatus["Resolved"] || 0,
                    ticketStatus["In Progress"] || 0,
                    ticketStatus["Closed"] || 0
                ];
                statusChart.update();

                // Update Category Chart
                categoryChart.data.datasets[0].data = [
                    ticketCategory["Technical"] || 0,
                    ticketCategory["Billing"] || 0,
                    ticketCategory["General Inquiry"] || 0,
                    ticketCategory["Others"] || 0
                ];
                categoryChart.update();
            }

            // Initial rendering
            renderTeams(filteredTeams);

            const searchInput = document.getElementById('team-search-input');
            searchInput.addEventListener('input', () => {
                const searchTerm = searchInput.value.toLowerCase();
                filteredTeams = teams.filter(team =>
                    team.Team.TeamName.toLowerCase().includes(searchTerm)
                );
                currentPage = 1; // Reset to first page on search
                renderTeams(filteredTeams);
            });

            // Placeholder initial values
            const initialTicketVolume = { "1star": 5, "2star": 10, "3star": 15, "4star": 12, "5star": 16 };
            const initialTicketStatus = { "Open": 0, "Resolved": 10, "In Progress": 15, "Closed": 16 };
            const initialTicketCategory = { "Technical": 5, "Billing": 10, "General Inquiry": 15, "Others": 16 };

            // Initial chart rendering
            updateCharts(initialTicketVolume, initialTicketStatus, initialTicketCategory);
        });

        const ctx = document.getElementById('LineTicketVolumeMetric').getContext('2d');
        const lineChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: ['1star', '2star', '3star', '4star', '5star'],
                datasets: [{
                    data: [],
                    label: "Ticket Volume",
                    borderWidth: 1,
                    borderColor: 'rgba(75, 192, 192, 1)',
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    fill: true,
                    tension: 0.4
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

        const pieChartStatus = document.getElementById('pieChartStatus').getContext('2d');
        const statusChart = new Chart(pieChartStatus, {
            type: 'doughnut',
            data: {
                labels: ['Open', 'Resolved', 'In Progress', 'Closed'],
                datasets: [{
                    data: [],
                    backgroundColor: ['#40A6D8', '#6DB971', '#E68F36', '#DA5D5B']
                }]
            }
        });

        const pieChartCategory = document.getElementById('pieChartCategory').getContext('2d');
        const categoryChart = new Chart(pieChartCategory, {
            type: 'doughnut',
            data: {
                labels: ['Technical', 'Billing', 'General Inquiry', 'Others'],
                datasets: [{
                    data: [],
                    backgroundColor: ['#40A6D8', '#E68F36', '#6DB971', '#DA5D5B']
                }]
            }
        });
    </script>


}
