@section styles {
    <link rel="stylesheet" href="~/css/user_tickets.css" />
}

<div class="modal fade" id="settings" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="ticket-modal1">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">User Preferences</h5>
                    <button type="button" class="btn-close x_button" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body scrollable">
                    <form id="userPreferencesForm">
                        <div class="row mb-3">
                            <div class="col">
                                <div class="form-floating">
                                    <input type="text" class="form-control" id="floatingName" name="name" placeholder="Full name">
                                    <label for="floatingName">Full name</label>
                                </div>
                            </div>
                        </div>

                        <div class="form-floating mb-3">
                            <input type="email" class="form-control" id="floatingEmail" name="email" placeholder="Email">
                            <label for="floatingEmail">Email</label>
                        </div>                        

                        <div class="form-floating mb-3">
                            <select class="form-select" id="setDefaultTicketView" name="defaultTicketView" aria-label="Floating label select example">
                                <option selected>Set your preference</option>
                                <option value="Open">Open Tickets</option>
                                <option value="Assigned">Assigned Tickets</option>
                                <option value="In Progress">In Progress Tickets</option>
                                <option value="Resolved">Resolved Tickets</option>
                                <option value="Closed">Closed Tickets</option>
                            </select>
                            <label for="floatingSelect1">Default Ticket View</label>
                        </div>

                        <div class="form-floating mb-3">
                            <select class="form-select" id="setInAppNotifications" name="inAppNotifications" aria-label="Floating label select example">
                                <option selected>Set your preference</option>
                                <option value="1">On</option>
                                <option value="2">Off</option>
                            </select>
                            <label for="floatingSelect2">Notifications</label>
                        </div>

                        <div class="form-floating mb-3">
                            <input type="number" class="form-control" id="setDefaultTicketPerPage" name="defaultTicketPerPage" placeholder="Enter a number" min="0" max="100">
                            <label for="defaultTicketPerPage">Default Ticket Per Page</label>
                        </div>

                        <div class="button_card mb-3 d-flex justify-content-between">
                            <button type="button" class="btn attachment custom-button" id="savePreferences" style="background-color: #E21818; color: white;">
                                <i class='bx bxl-telegram bx-xs bx-fw uh' style="align-self:center;"></i> Save
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        fetch('/User/Preferences')
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {

                console.log(data);

                document.querySelector('#floatingName').value = data.name;
                document.querySelector('#floatingEmail').value = data.email;
                document.querySelector('#setDefaultTicketView').value = data.defaultTicketView || 'Set your preference';
                document.querySelector('#setDefaultTicketPerPage').value = data.defaultTicketPerPage || 'Set';

                if (data.inAppNotifications) {
                    document.querySelector('#setInAppNotifications').value = 1;
                } else {
                    document.querySelector('#setInAppNotifications').value = 2;
                }

                console.log(data);
            })
            .catch(error => console.error('Error fetching user preferences:', error));

		document.querySelector('#savePreferences').addEventListener('click', function () {
		
            const formData = new FormData(document.querySelector('#userPreferencesForm'));

            const preferences = {
                name: formData.get('name'),
                email: formData.get('email'),
                password: formData.get('password'),
                defaultTicketView: formData.get('defaultTicketView'),
                defaultTicketPerPage: formData.get('defaultTicketPerPage'),
                inAppNotifications: formData.get('inAppNotifications') === '1'
            };


			fetch('/User/UpdatePreferences', {
				method: 'POST',
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify(preferences)
			})
				.then(response => {
					if (!response.ok) {
						throw new Error(`Server Error: ${response.status} - ${response.statusText}`);
					}
					return response.json();
				})
				.then(data => {
					if (data.success) {
						console.log('Preferences updated successfully:', data);
					} else {
						console.error('Error updating preferences (from server):', data.message || 'Unknown error');
					}
				})
				.catch(error => {
					console.error('Error updating preferences (network or parsing):', error.message);
				});
		});
    });
</script>