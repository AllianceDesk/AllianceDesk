@model ASI.Basecode.Services.ServiceModels.UserTicketsViewModel

@{
    ViewData["Title"] = "Tickets";
}

@section styles {
    <link rel="stylesheet" href="~/css/user_tickets.css" />
    <link rel="stylesheet" href="~/css/Common.css" />
}

<div id="container">
    <header class="px-5">

        <div>
            <img src="~/img/alliancedesk-logo.png" style="width: 185px;" alt="logo">
        </div>

        <div class="">

            <a asp-action="Index" asp-controller="Notification"><i class='bx bx-bell bx-sm bx-fw pt-1 mr-1 bell_icon' style="cursor: pointer; transform: scale(1.1);"></i></a>
            <div class="btn-group">
                <img src="~/img/profile-logo.png" class="dpicn" data-bs-toggle="dropdown" aria-expanded="false" alt="Profile">
                <ul class="dropdown-menu">
                    <li><a class="dropdown-item" href="#"><i class='bx bx-user'></i> Profile</a></li>
                    <li><a class="dropdown-item" data-bs-toggle="modal" data-bs-target="#settings" style="cursor: pointer;"><i class='bx bx-cog'></i> Settings</a></li>
                    <li><a class="dropdown-item" asp-action="SignOutUser" asp-controller="Account"><i class='bx bx-log-out'></i> Logout</a></li>
                </ul>
            </div>
            
        </div>
    </header>

    <nav>
        <div class="d-flex justify-content-between mt-3">

            <h2>Tickets</h2>
            <button type="button" class="btn btn-danger admin-sb-active-button" data-bs-toggle="modal" data-bs-target="#createTicket" style="text-align: center; align-items: center;">
                <i class='bx bx-book-add bx-fw' style=' transform: scale(1)'></i>
                <span>Create Ticket</span>
            </button>

        </div>

        <div class="d-flex justify-content-between">
            <div id="buttonContainer" >
                @foreach (var status in Model.Statuses)
                {
                    <a asp-action="Tickets" asp-route-status=@status.Key class="btn btn-danger border_color @(status.Key == Model.CurrentStatus.ToString() ? "activeButton" : "inactiveButton")" style="font-size: 14px;">@status.Value</a>
                }
            </div>

            <div class="d-flex gap-3">

                <div class="d-flex position-relative" style="width: 20rem; margin-top: 0.25rem;">
                    <i class='bx bx-search-alt search-icon' style='color:#1d1c1c'></i>
                    <input class="form-control rounded-5 border_color" id="search-input" type="search" placeholder="Search" aria-label="Search" value="@Model.CurrentSearchTerm" style="width: 100%; height: 2.6rem; padding-left: 2.5rem;">
                </div>

                
                <select class="form-select border_color" style="height: 2.5rem; width: 10.1rem; margin-top: 0.8rem; cursor: pointer; border: none;" aria-label="Small select example">
                    <option selected>Date</option>
                    <option value="1">Category</option>
                </select>

            </div>
        </div>
        
    </nav>

    <main>
        @if (Model.Tickets != null && Model.Tickets.Any())
        {
            <div id="card_content">
                @foreach (var item in Model.Tickets)
                {
					<div class="ticket-container agents rounded-2 w-100">
                        <a href="#" class="ticket-link ellipsis" data-bs-toggle="modal" data-bs-target="#viewTicket" data-ticket-id="@item.TicketId">								

                            <div class="d-flex">

                                <h5 class="text-black">@item.TicketNumber:&nbsp;</h5>

                                <h5 class="text-secondary">@item.Title</h5>

                            </div>
									
						    <p class="date ml-1">@item.RelativeTime</p>

                            <div class="ellipsis mt-2">
                                <p class="text-black mt-2">
                                    @if (item.Description.Length > 300) {
                                        @item.Description.Substring(0, 120)
                                @Html.Raw("...")
                                    } else {
                                        @item.Description
                                    }
                                </p>
                            </div>

							@if (item.AgentName != null && item.AgentName != "" && item.AgentName != "Unknown")
							{
								<div class="agent-container">
									<div class="agent-name-date-container">
										<h5 class="agent-name">@item.AgentName</h5>
									</div>
									<div class="assign-agent">Assigned agent</div>
								</div>
							}
							@if (item.Status == "Closed")
							{
								if(item.Feedback == null)
								{
									<button class="btn feedback" type="button" data-bs-toggle="modal" data-bs-target="#fillFeedback" data-ticket-id="@item.TicketId">
										<i class="bx bx-user-voice bx-xs bx-fw feedbackIcon"></i>
										Feedback
									</button>
								}
								else
								{
									<p>Feedback Rating: @item.Feedback.Rating</p>
									<p>Feedback Comments: @item.Feedback.Comments</p>
								}
							}
						</a>
                        
                        <div class="btn-group option">
							@if (item.Status == "Open" || item.Status == "Assigned")
							{
							    <button class="btn icon-button" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
									<i class="bx bx-dots-vertical-rounded bx-sm icon-ticket" style="color: #808080;"></i>
								</button> 
								<ul class="dropdown-menu menu">
									<li>
										<a class="dropdown-item item" href="#" data-bs-toggle="modal" data-bs-target="#editTicket" data-ticket-id="@item.TicketId">
											<i class="bx bx-edit bx-xs bx-fw" style="color: #808080;"></i>
											Edit
										</a>
									</li>
									<li>
										<a class="dropdown-item item" href="#" data-bs-toggle="modal" data-bs-target="#deleteTicket" data-ticket-id="@item.TicketId">
											<i class="bx bx-trash bx-xs bx-fw" style="color: #808080;"></i>
											Delete
										</a>
									</li>
								</ul>
							}
							else if (item.Status == "Resolved")
							{
								<button class="btn icon-button" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
									<i class="bx bx-dots-vertical-rounded bx-sm icon-ticket" style="color: #808080;"></i>
								</button>
								<ul class="dropdown-menu menu">
									<li>
										<a class="dropdown-item item" href="#" data-bs-toggle="modal" data-bs-target="#ticketActionModal" data-action-type="reopen" data-ticket-id="@item.TicketId">
											<i class="bx bx-show bx-xs bx-fw" style="color: #808080;"></i>
											Reopen
										</a>
									</li>
									<li>
										<a class="dropdown-item item" href="#" data-bs-toggle="modal" data-bs-target="#ticketActionModal" data-action-type="close" data-ticket-id="@item.TicketId">
											<i class="bx bx-check bx-xs bx-fw" style="color: #808080;"></i>
											Close
										</a>
									</li>
								</ul>
							}
						</div>
					</div>
                }

                <div class="pagination-controls">
                    @if (Model.TotalPages > 1)
                    {
                        <nav aria-label="Page navigation">
                            <ul class="pagination">
                                <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                                    <a class="page-link" href="@Url.Action("Tickets", new { page = 1, status = Model.CurrentStatus })">&lt;&lt;</a>
                                </li>
                                <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                                    <a class="page-link" href="@Url.Action("Tickets", new { page = Model.CurrentPage - 1, status = Model.CurrentStatus })">&lt;</a>
                                </li>

                                <li class="page-item active">
                                    <span class="page-link">@Model.CurrentPage</span>
                                </li>

                                <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                                    <a class="page-link" href="@Url.Action("Tickets", new { page = Model.CurrentPage + 1, status = Model.CurrentStatus })">&gt;</a>
                                </li>
                                <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                                    <a class="page-link" href="@Url.Action("Tickets", new { page = Model.TotalPages, status = Model.CurrentStatus })">&gt;&gt;</a>
                                </li>
                            </ul>
                        </nav>
                    }
                </div>
            </div>
        }
        else
        {
            <h1 class="d-flex justify-content-center align-items-center h-75">No tickets found</h1>
        }
        @Html.Partial("ViewTicketModal")
        @Html.Partial("CreateTicketModal")
        @Html.Partial("EditTicketModal")
        @Html.Partial("DeleteTicketModal")
        @Html.Partial("TicketActionModal")
        @Html.Partial("SettingsModal")
        @Html.Partial("AddFeedbackModal", Model.Feedback)
    </main>

    <div id="sidebar" class="px-4">
        <a asp-controller="User" asp-action="Tickets" method="get" type="button" class="btn btn-danger mt-3 w-100 d-flex justify-content-start align-items-center admin-sb-active-button remove_default" style="height: 3rem;">
            <i class='bx bx-book' style=' transform: scale(1.3)'></i>
            <span class="ml-2">My Tickets</span>
        </a>

        <a asp-controller="Article" asp-action="Index" method="get" type="button" class="btn mt-3 w-100 d-flex justify-content-start align-items-center admin-sb-inactive-button remove_default" style="height: 3rem;">
            <i class='bx bx-news' style=' transform: scale(1.3)'></i>
            <span class="ml-2">Knowledge Base</span>
        </a>
    </div>
</div>

<div class="modal fade" id="knowledge" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <!-- The content for Create Article Modal will be loaded here-->
        </div>
    </div>
</div>

<div class="modal fade" id="detail" tabindex="-1">
    <div class="modal-dialog modal-xl modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <!-- The content for Article Detail Modal will be loaded here-->
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const createTicketModal = new bootstrap.Modal(document.getElementById('createTicket'));
        const viewTicketModal = new bootstrap.Modal(document.getElementById('viewTicket'));
        const editTicketModal = new bootstrap.Modal(document.getElementById('editTicket'));
        const feedbackModal = new bootstrap.Modal(document.getElementById('fillFeedback'));
        const ticketActionModal = new bootstrap.Modal(document.getElementById('ticketActionModal'));

        const dpIcon = document.querySelector('.dpicn');
        const dropdownMenu = document.getElementById('dropdownMenu');

        dpIcon.addEventListener('click', function (event) {
            event.stopPropagation();
            dropdownMenu.style.display = dropdownMenu.style.display === 'block' ? 'none' : 'block';
        });

        document.addEventListener('click', function (event) {
            if (!dpIcon.contains(event.target) && !dropdownMenu.contains(event.target)) {
                dropdownMenu.style.display = 'none';
            }
        });

        document.getElementById('search-input').addEventListener('keypress', function (event) {
            if (event.code === 'Enter') {
                event.preventDefault(); // Prevent form submission

                const searchTerm = this.value;
                const status = '@Model.CurrentStatus';
                let url = '@Url.Action("Tickets")';

                // Construct the URL with the appropriate parameters
                if (status !== 'All') {
                    url += '?status=' + encodeURIComponent(status);
                }

                if (searchTerm) {
                    url += (url.indexOf('?') === -1 ? '?' : '&') + 'searchTerm=' + encodeURIComponent(searchTerm);
                }

                location.replace(url);
            }
        });

        document.querySelectorAll('[data-bs-toggle="modal"]').forEach(element => {
            element.addEventListener('click', function () {
                const target = this.getAttribute('data-bs-target');

                if (target === '#editTicket') {
                    const ticketId = this.getAttribute('data-ticket-id');
                    document.querySelector('#editTicketForm').action = `/User/Tickets/${ticketId}`;

                    console.log(ticketId);

                    fetch(`/User/Tickets/${ticketId}`)
                        .then(response => {
                            if (!response.ok) {
                                throw new Error(`Server Error: ${response.status} - ${response.statusText}`);
                            }
                            return response.json();
                        })
                        .then(data => {
                            document.querySelector('#EditTicketId').value = ticketId;
                            document.querySelector('#EditTitle').value = data.title;

                            const editCategorySelect = document.querySelector('#EditCategory');
                            for (const option of editCategorySelect.options) {
                                if (parseInt(option.value, 10) === parseInt(data.categoryId, 10)) {
                                    option.selected = true;
                                    break;
                                }
                            }
                            
                            const editPrioritySelect = document.querySelector('#EditPriority');
                            for (const option of editPrioritySelect.options) {
                                if (parseInt(option.value, 10) === parseInt(data.priorityId, 10)) {
                                    option.selected = true;
                                    break;
                                }
                            }

                            document.querySelector('#EditDescription').value = data.description;
                            editTicketModal.show();
                        })
                        .catch(error => console.error('Error fetching ticket data:', error));

                }
                else if (target === '#fillFeedback') {
                    const ticketId = this.getAttribute('data-ticket-id');
                    document.querySelector('#Feedback_TicketId').value = ticketId;
                    document.querySelector('#fillFeedbackForm').action = `/User/Tickets/${ticketId}/Feedback`;
                    feedbackModal.show();
                }
                else if (target === '#ticketActionModal') {
                    const actionType = this.getAttribute('data-action-type');
                    const ticketId = this.getAttribute('data-ticket-id');

                    let title = '';
                    let modalMessage = '';
                    let buttonText = '';
                    let formAction = '';

                    if (actionType === 'close') {
                        console.log('close');
                        title = 'Close Ticket';
                        modalMessage = 'Are you sure you want to close this ticket?';
                        buttonText = 'Close';
                        formAction = `/User/Tickets/${ticketId}/Close`;
                    } else if (actionType === 'reopen') {
                        console.log('reopen');
                        title = 'Reopen Ticket';
                        modalMessage = 'Are you sure you want to reopen this ticket?';
                        buttonText = 'Reopen';
                        formAction = `/User/Tickets/${ticketId}/Reopen`;
                    }

                    document.getElementById('ticketActionModalLabel').textContent = title;
                    document.getElementById('modalMessage').textContent = modalMessage;
                    document.getElementById('ticketActionButton').textContent = buttonText;
                    document.getElementById('ticketActionForm').action = formAction;
                    ticketActionModal.show();
                }
                else if (target === '#viewTicket') {
                    const ticketId = this.getAttribute('data-ticket-id');

                    console.log(ticketId);

                    fetch(`/User/Tickets/${ticketId}`)
                        .then(response => {
                            if (!response.ok) {
                                throw new Error(`Server Error: ${response.status} - ${response.statusText}`);
                            }
                            return response.json();
                        })
                        .then(data => {
                            console.log(data);
                            document.querySelector('#ViewName').textContent = data.user;
                            document.querySelector('#ViewDate').textContent = data.dateCreated;
                            document.querySelector('#ViewTitle').textContent = data.title;
                            document.querySelector('#ViewDetails').textContent = data.description;
                            document.querySelector('#ViewStatus').textContent = data.latestUpdateMessage;
                            document.querySelector('#ViewStatusDate').textContent = data.latestUpdateDate;

                            const gallery = document.querySelector('#ViewGallery');
                            gallery.innerHTML = '';

                            data.files.forEach(image => {
                                const anchor = document.createElement('a');
                                anchor.href = image;
                                anchor.setAttribute('data-lightbox', 'ticket-gallery');
                                anchor.setAttribute('data-title', data.title);

                                const img = document.createElement('img');
                                img.src = image;
                                img.alt = data.title;
                                img.classList.add('gallery-thumbnail');

                                anchor.appendChild(img);
                                gallery.appendChild(anchor);
                            });

                            viewTicketModal.show();
                        })
                        .catch(error => console.error('Error fetching ticket data:', error));
                } else {
                    const modalElement = document.querySelector(target);
                    if (modalElement) {
                        const modal = new bootstrap.Modal(modalElement);
                        modal.show();
                    }
                }
            });
        });

        document.querySelectorAll('input[name="Rating"]').forEach(elem => {
            elem.addEventListener('change', function () {
                document.getElementById('Rating').value = this.value;
            });
        });

        document.querySelector('#savePreferences').addEventListener('click', function () {
            const formData = new FormData(document.querySelector('#userPreferencesForm'));
            const preferences = Object.fromEntries(formData.entries());

            // Convert inAppNotifications to boolean
            preferences.inAppNotifications = preferences.inAppNotifications === '1';

            fetch('/User/UpdatePreferences', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(preferences)
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`Server Error: ${response.status} - ${response.statusText}`);
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        toastr.success('Preferences updated successfully');
                    } else {
                        toastr.error('Error saving preferences');
                    }
                })
                .catch(error => console.error('Error updating preferences:', error.message));
        });
    });

</script>

    document.addEventListener('DOMContentLoaded', function () {
        $(document).on('click', '[data-article-detail-btn]', function () {
            var articleId = $(this).data('article-id');

            // Perform AJAX request to fetch article details
            $.ajax({
                url: '/KnowledgeBase/Article-Detail',
                type: 'GET',
                data: { articleId: articleId },
                success: function (result) {
                    $('#detail .modal-content').html(result);
                    $('#detail').modal('show');
                    console.log('Article details successfully loaded!');
                },
                error: function (error) {
                    console.error('Error loading article details:', error);
                }
            });
        });

        var knowledgeBase = document.getElementById('knowledgeBase');
        knowledgeBase.addEventListener('click', function () {

            // Perform AJAX request to fetch article details
            $.ajax({
                url: '/KnowledgeBaseModal',
                type: 'GET',
                success: function (result) {
                    $('#knowledge .modal-content').html(result);
                    $('#knowledge').modal('show');
                    console.log('KnowledgeBase successfully loaded!');
                },
                error: function (error) {
                    console.error('Error loading article details:', error);
                }
            });
        });

        $(document).on('click', '[data-backToKBModal-btn]', function () {
            // Perform AJAX request to add to favorites
            $.ajax({
                url: 'Tickets',
                type: 'GET',
                success: function (result) {
                    // Refresh the article detail modal
                    loadKnowledgeBase();
                },
                error: function (error) {
                    console.error('Error adding article to favorites:', error);
                }
            });
        });

        // Function to load article details
        function loadKnowledgeBase() {
            // Perform AJAX request to fetch article details
            $.ajax({
                url: '/KnowledgeBaseModal',
                type: 'GET',
                success: function (result) {
                    $('#knowledge .modal-content').html(result);
                    $('#knowledge').modal('show');
                    console.log('KnowledgeBase successfully loaded!');
                },
                error: function (error) {
                    console.error('Error loading article details:', error);
                }
            });
        }

        $(document).on('click', '[data-article-addFavorites-btn]', function () {
            var articleId = $(this).data('article-id');

            // Perform AJAX request to add to favorites
            $.ajax({
                url: '/KnowledgeBase/Article-AddFavorite',
                type: 'POST',
                data: { articleId: articleId },
                success: function (result) {
                    // Refresh the article detail modal
                    loadArticleDetails(articleId);
                },
                error: function (error) {
                    console.error('Error adding article to favorites:', error);
                }
            });
        });

        $(document).on('click', '[data-article-removeFavorites-btn]', function () {
            var articleId = $(this).data('article-id');

            // Perform AJAX request to remove from favorites
            $.ajax({
                url: '/KnowledgeBase/Article-DeleteFavorite',
                type: 'POST',
                data: { articleId: articleId },
                success: function (result) {
                    // Refresh the article detail modal
                    loadArticleDetails(articleId);
                },
                error: function (error) {
                    console.error('Error removing article from favorites:', error);
                }
            });
        });

        // Function to load article details
        function loadArticleDetails(articleId) {
            $.ajax({
                url: '/KnowledgeBase/Article-Detail',
                type: 'GET',
                data: { articleId: articleId },
                success: function (result) {
                    $('#detail .modal-content').html(result);
                    $('#detail').modal('show');
                    console.log('Article details successfully loaded!');
                },
                error: function (error) {
                    console.error('Error loading article details:', error);
                }
            });
        }
    });

    function updateCharacterCount(textarea, counterId) {
        var maxLength = textarea.getAttribute('maxlength');
        var currentLength = textarea.value.length;
        var counterElement = document.getElementById(counterId);

        counterElement.textContent = currentLength + '/' + maxLength;

        // Optional: Add warning style if near the limit
        if (currentLength > maxLength - 10) {
            counterElement.classList.add('warning');
        } else {
            counterElement.classList.remove('warning');
        }
    }
</script>