@model ASI.Basecode.Services.ServiceModels.UserTicketsViewModel

@{
    ViewData["Title"] = "Tickets";
}

@section styles {
    <link rel="stylesheet" href="~/css/user_tickets.css" />
}

<div id="container">
    <header>
        <div class="logo">
            <img src="~/img/alliancedesk-logo.png" style="width: 185px;" alt="logo" onclick="window.location.href = '@Url.Action("Index", "Home")';">
        </div>

        <div class="header-buttons">
            <button type="button" class="btn button button-container1" data-bs-toggle="modal" data-bs-target="#createTicket"><i class='bx bx-plus-circle bx-xs bx-fw header_button_icon'></i> Create Ticket </button>
            <a asp-action="Index" asp-controller="Notification" class="bell_icon"><i class='bx bx-bell bx-sm header_icon'></i></a>            
            <i class='bx bx-cog bx-sm header_icon' data-bs-toggle="modal" data-bs-target="#settings"></i>
                        

            <a class="profile" href="#">
                <img src="~/img/profile-logo.png" class="dpicn hover-pointer" alt="dp">
            </a>

            <ul class="dropdown" id="dropdownMenu">
                <li>

                    <a class="dropdown-item" href="#"><i class="bx bx-user bx-xs bx-fw" style="color: #3D3B40;"></i> Profile</a>
                </li>
                <li>

                    <a class="dropdown-item" asp-action="SignOutUser" asp-controller="Account"><i class="bx bx-log-out bx-xs bx-fw" style="color: #3D3B40;"></i> Logout</a>
                </li>
            </ul>
        </div>
    </header>

    <nav>
        <div id="buttonContainer">
            @foreach (var status in Model.Statuses)
            {
                <a asp-action="Tickets" asp-route-status=@status.Key class="btn btn-primary @(status.Key == Model.CurrentStatus.ToString() ? "activeButton" : "inactiveButton")">@status.Value</a>
            }
        </div> 

        <select class="form-select nav-select" id="floatingSelect" aria-label="Floating label select example">
            <option selected>Date</option>
            <option value="1">Category</option>
        </select>
    </nav>

    <main>
        @if (Model.Tickets != null && Model.Tickets.Any())
        {
            <div id="card_content">
                @foreach (var item in Model.Tickets)
                {
					<div class="ticket-container">
						<a href="#" class="ticket-link" data-bs-toggle="modal" data-bs-target="#viewTicket" data-ticket-id="@item.TicketId">
                            <div class="top-container">
								<div class="nameDateContainer">
									<h5 class="name">
										@item.CreatorName
									</h5>
									<p class="date">@item.RelativeTime</p>
								</div>
							</div>
							<h2 class="question">@item.Title</h2>
							<p class="details">@item.Description</p>
							@if (item.AgentName != null)
							{
								<div class="agent-container">
									<div class="agent-name-date-container">
										<h5 class="agent-name">@item.AgentName</h5>
									</div>
									<div class="assign-agent">Assigned agent</div>
								</div>
							}
							@if (item.Status == "Closed")
							{
								if(item.Feedback == null)
								{
									<button class="btn feedback" type="button" data-bs-toggle="modal" data-bs-target="#fillFeedback" data-ticket-id="@item.TicketId">
										<i class="bx bx-user-voice bx-xs bx-fw feedbackIcon"></i>
										Feedback
									</button>
								}
								else
								{
									<p>Feedback Rating: @item.Feedback.Rating</p>
									<p>Feedback Comments: @item.Feedback.Comments</p>
								}
							}
						</a>
                        
                        <div class="btn-group option">
							@if (item.Status == "Open" || item.Status == "Assigned")
							{
								<button class="btn icon-button" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
									<i class="bx bx-dots-vertical-rounded bx-sm icon-ticket" style="color: #808080;"></i>
								</button>
								<ul class="dropdown-menu menu">
									<li>
										<a class="dropdown-item item" href="#" data-bs-toggle="modal" data-bs-target="#editTicket" data-ticket-id="@item.TicketId">
											<i class="bx bx-edit bx-xs bx-fw" style="color: #808080;"></i>
											Edit
										</a>
									</li>
									<li>
										<a class="dropdown-item item" href="#" data-bs-toggle="modal" data-bs-target="#deleteTicket" data-ticket-id="@item.TicketId">
											<i class="bx bx-trash bx-xs bx-fw" style="color: #808080;"></i>
											Delete
										</a>
									</li>
								</ul>
							}
							else if (item.Status == "Resolved")
							{
								<button class="btn icon-button" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
									<i class="bx bx-dots-vertical-rounded bx-sm icon-ticket" style="color: #808080;"></i>
								</button>
								<ul class="dropdown-menu menu">
									<li>
										<a class="dropdown-item item" href="#" data-bs-toggle="modal" data-bs-target="#ticketActionModal" data-action-type="reopen" data-ticket-id="@item.TicketId">
											<i class="bx bx-show bx-xs bx-fw" style="color: #808080;"></i>
											Reopen
										</a>
									</li>
									<li>
										<a class="dropdown-item item" href="#" data-bs-toggle="modal" data-bs-target="#ticketActionModal" data-action-type="close" data-ticket-id="@item.TicketId">
											<i class="bx bx-check bx-xs bx-fw" style="color: #808080;"></i>
											Close
										</a>
									</li>
								</ul>
							}
						</div>
					</div>
                }

                <div class="pagination-controls">
                    @if (Model.TotalPages > 1)
                    {
                        <nav aria-label="Page navigation">
                            <ul class="pagination">
                                <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                                    <a class="page-link" href="@Url.Action("Tickets", new { page = 1, status = Model.CurrentStatus })">&lt;&lt;</a>
                                </li>
                                <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                                    <a class="page-link" href="@Url.Action("Tickets", new { page = Model.CurrentPage - 1, status = Model.CurrentStatus })">&lt;</a>
                                </li>

                                <li class="page-item active">
                                    <span class="page-link">@Model.CurrentPage</span>
                                </li>

                                <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                                    <a class="page-link" href="@Url.Action("Tickets", new { page = Model.CurrentPage + 1, status = Model.CurrentStatus })">&gt;</a>
                                </li>
                                <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                                    <a class="page-link" href="@Url.Action("Tickets", new { page = Model.TotalPages, status = Model.CurrentStatus })">&gt;&gt;</a>
                                </li>
                            </ul>
                        </nav>
                    }
                </div>
            </div>
        }
        else
        {
            <h1 class="d-flex justify-content-center align-items-center h-75">No tickets found</h1>
        }

        @Html.Partial("ViewTicketModal")

        @Html.Partial("CreateTicketModal", Model.Ticket)
        
        @Html.Partial("EditTicketModal")

        @Html.Partial("TicketActionModal")

        @Html.Partial("DeleteTicketModal")

        @Html.Partial("AddFeedbackModal", Model.Feedback) 

        @Html.Partial("SettingsModal")

    </main>

    <div id="sidebar">

        <div id="search-container">
            <i class='bx bx-search'></i>
            <input type="text" id="search-input" placeholder="Search Tickets" value="@Model.CurrentSearchTerm">
        </div>

        <div id="button-container">
            <i class='bx bx-list-ul'></i>
            <span class="label-1">Tickets</span>
        </div>


        <div id="instruction-container">

            <div class="instruction-label" data-bs-toggle="modal" data-bs-target="#knowledge" id="knowledgeBase">
                <i class="fa-regular fa-newspaper"></i>
                <span class="label-2">Knowledge Base</span>
            </div>

            <hr />

            <div class="instruction-label">
                <i class='bx bx-star'></i>
                <span class="label-2">Favorites</span>
            </div>

            <hr />

            <div class="instruction-detail">
                <ul>
                    @foreach(var article in Model.Favorites)
                    {
                        <li class="text-sm" data-article-detail-btn data-article-id="@article.ArticleId" data-bs-toggle="modal" data-bs-target="#detail">@article.Title</li>
                    }
                </ul>
            </div>

        </div>
    </div>
</div>

<div class="modal fade" id="knowledge" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <!-- The content for Create Article Modal will be loaded here-->
        </div>
    </div>
</div>

<div class="modal fade" id="detail" tabindex="-1">
    <div class="modal-dialog modal-xl modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <!-- The content for Article Detail Modal will be loaded here-->
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const viewTicketModal = new bootstrap.Modal(document.getElementById('viewTicket'));
        const editTicketModal = new bootstrap.Modal(document.getElementById('editTicket'));
        const feedbackModal = new bootstrap.Modal(document.getElementById('fillFeedback'));
        const ticketActionModal = new bootstrap.Modal(document.getElementById('ticketActionModal'));

        const dpIcon = document.querySelector('.dpicn');
        const dropdownMenu = document.getElementById('dropdownMenu');

        dpIcon.addEventListener('click', function (event) {
            event.stopPropagation();
            dropdownMenu.style.display = dropdownMenu.style.display === 'block' ? 'none' : 'block';
        });

        document.addEventListener('click', function (event) {
            if (!dpIcon.contains(event.target) && !dropdownMenu.contains(event.target)) {
                dropdownMenu.style.display = 'none';
            }
        });

        document.getElementById('search-input').addEventListener('keypress', function (event) {
            if (event.code === 'Enter') {
                event.preventDefault(); // Prevent form submission

                const searchTerm = this.value;
                const status = '@Model.CurrentStatus';
                let url = '@Url.Action("Tickets")';

                // Construct the URL with the appropriate parameters
                if (status !== 'All') {
                    url += '?status=' + encodeURIComponent(status);
                }

                if (searchTerm) {
                    url += (url.indexOf('?') === -1 ? '?' : '&') + 'searchTerm=' + encodeURIComponent(searchTerm);
                }

                location.replace(url);
            }
        });

        document.querySelectorAll('[data-bs-toggle="modal"]').forEach(element => {
            element.addEventListener('click', function () {
                const target = this.getAttribute('data-bs-target');

                if (target === '#editTicket') {
                    const ticketId = this.getAttribute('data-ticket-id');
                    document.querySelector('#editTicketForm').action = `/User/Tickets/${ticketId}/Edit`;

                    fetch(`/User/Tickets/${ticketId}/Edit`)
                        .then(response => {
                            if (!response.ok) {
                                throw new Error(`Server Error: ${response.status} - ${response.statusText}`);
                            }
                            return response.json();
                        })
                        .then(data => {
                            document.querySelector('#Ticket_TicketId').value = data.ticketId;
                            document.querySelector('#Edit_Ticket_Title').value = data.title;
                            document.querySelector('#Ticket_CategoryId').value = data.categoryId;
                            document.querySelector('#Ticket_PriorityId').value = data.priorityId;
                            document.querySelector('#Ticket_Description').value = data.description;
                            editTicketModal.show();
                        })
                        .catch(error => console.error('Error fetching ticket data:', error));
                } else if (target === '#fillFeedback') {
                    const ticketId = this.getAttribute('data-ticket-id');
                    document.querySelector('#Feedback_TicketId').value = ticketId;
                    document.querySelector('#fillFeedbackForm').action = `/User/Tickets/${ticketId}/Feedback`;
                    feedbackModal.show();
                } else if (target === '#ticketActionModal') {
                    const actionType = this.getAttribute('data-action-type');
                    const ticketId = this.getAttribute('data-ticket-id');

                    let title = '';
                    let modalMessage = '';
                    let buttonText = '';
                    let formAction = '';

                    if (actionType === 'close') {
                        title = 'Close Ticket';
                        modalMessage = 'Are you sure you want to close this ticket?';
                        buttonText = 'Close';
                        formAction = `/User/Tickets/${ticketId}/Close`;
                    } else if (actionType === 'reopen') {
                        title = 'Reopen Ticket';
                        modalMessage = 'Are you sure you want to reopen this ticket?';
                        buttonText = 'Reopen';
                        formAction = `/User/Tickets/${ticketId}/Reopen`;
                    }

                    document.getElementById('ticketActionModalLabel').textContent = title;
                    document.getElementById('modalMessage').textContent = modalMessage;
                    document.getElementById('ticketActionButton').textContent = buttonText;
                    document.getElementById('ticketActionForm').action = formAction;
                    ticketActionModal.show();
                } else if (target === '#viewTicket') {
                    const ticketId = this.getAttribute('data-ticket-id');

                    fetch(`/User/Tickets/${ticketId}`)
                        .then(response => {
                            if (!response.ok) {
                                throw new Error(`Server Error: ${response.status} - ${response.statusText}`);
                            }
                            return response.json();
                        })
                        .then(data => {
                            console.log(data);
                            document.querySelector('#ViewName').textContent = data.user;
                            document.querySelector('#ViewDate').textContent = data.dateCreated;
                            document.querySelector('#ViewTitle').textContent = data.title;
                            document.querySelector('#ViewDetails').textContent = data.description;
                            document.querySelector('#ViewStatus').textContent = data.latestUpdateMessage;
                            document.querySelector('#ViewStatusDate').textContent = data.latestUpdateDate;

                            const gallery = document.querySelector('#ViewGallery');
                            gallery.innerHTML = '';

                            data.files.forEach(image => {
                                const anchor = document.createElement('a');
                                anchor.href = image;
                                anchor.setAttribute('data-lightbox', 'ticket-gallery');
                                anchor.setAttribute('data-title', data.title);

                                const img = document.createElement('img');
                                img.src = image;
                                img.alt = data.title;
                                img.classList.add('gallery-thumbnail');

                                anchor.appendChild(img);
                                gallery.appendChild(anchor);
                            });

                            viewTicketModal.show();
                        })
                        .catch(error => console.error('Error fetching ticket data:', error));
                } else {
                    const modalElement = document.querySelector(target);
                    if (modalElement) {
                        const modal = new bootstrap.Modal(modalElement);
                        modal.show();
                    }
                }
            });
        });

        document.querySelectorAll('input[name="Rating"]').forEach(elem => {
            elem.addEventListener('change', function () {
                document.getElementById('Rating').value = this.value;
            });
        });

        document.querySelector('#savePreferences').addEventListener('click', function () {
            const formData = new FormData(document.querySelector('#userPreferencesForm'));
            const preferences = Object.fromEntries(formData.entries());

            // Convert inAppNotifications to boolean
            preferences.inAppNotifications = preferences.inAppNotifications === '1';

            fetch('/User/UpdatePreferences', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(preferences)
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`Server Error: ${response.status} - ${response.statusText}`);
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        toastr.success('Preferences updated successfully');
                    } else {
                        toastr.error('Error saving preferences');
                    }
                })
                .catch(error => console.error('Error updating preferences:', error.message));
        });
    });

</script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        $(document).on('click', '[data-article-detail-btn]', function () {
            var articleId = $(this).data('article-id');

            // Perform AJAX request to fetch article details
            $.ajax({
                url: '/KnowledgeBase/Article-Detail',
                type: 'GET',
                data: { articleId: articleId },
                success: function (result) {
                    $('#detail .modal-content').html(result);
                    $('#detail').modal('show');
                    console.log('Article details successfully loaded!');
                },
                error: function (error) {
                    console.error('Error loading article details:', error);
                }
            });
        });

        var knowledgeBase = document.getElementById('knowledgeBase');
        knowledgeBase.addEventListener('click', function () {

            // Perform AJAX request to fetch article details
            $.ajax({
                url: '/KnowledgeBaseModal',
                type: 'GET',
                success: function (result) {
                    $('#knowledge .modal-content').html(result);
                    $('#knowledge').modal('show');
                    console.log('KnowledgeBase successfully loaded!');
                },
                error: function (error) {
                    console.error('Error loading article details:', error);
                }
            });
        });

        $(document).on('click', '[data-backToKBModal-btn]', function () {
            // Perform AJAX request to add to favorites
            $.ajax({
                url: 'Tickets',
                type: 'GET',
                success: function (result) {
                    // Refresh the article detail modal
                    loadKnowledgeBase();
                },
                error: function (error) {
                    console.error('Error adding article to favorites:', error);
                }
            });
        });

        // Function to load article details
        function loadKnowledgeBase() {
            // Perform AJAX request to fetch article details
            $.ajax({
                url: '/KnowledgeBaseModal',
                type: 'GET',
                success: function (result) {
                    $('#knowledge .modal-content').html(result);
                    $('#knowledge').modal('show');
                    console.log('KnowledgeBase successfully loaded!');
                },
                error: function (error) {
                    console.error('Error loading article details:', error);
                }
            });
        }

        $(document).on('click', '[data-article-addFavorites-btn]', function () {
            var articleId = $(this).data('article-id');

            // Perform AJAX request to add to favorites
            $.ajax({
                url: '/KnowledgeBase/Article-AddFavorite',
                type: 'POST',
                data: { articleId: articleId },
                success: function (result) {
                    // Refresh the article detail modal
                    loadArticleDetails(articleId);
                },
                error: function (error) {
                    console.error('Error adding article to favorites:', error);
                }
            });
        });

        $(document).on('click', '[data-article-removeFavorites-btn]', function () {
            var articleId = $(this).data('article-id');

            // Perform AJAX request to remove from favorites
            $.ajax({
                url: '/KnowledgeBase/Article-DeleteFavorite',
                type: 'POST',
                data: { articleId: articleId },
                success: function (result) {
                    // Refresh the article detail modal
                    loadArticleDetails(articleId);
                },
                error: function (error) {
                    console.error('Error removing article from favorites:', error);
                }
            });
        });

        // Function to load article details
        function loadArticleDetails(articleId) {
            $.ajax({
                url: '/KnowledgeBase/Article-Detail',
                type: 'GET',
                data: { articleId: articleId },
                success: function (result) {
                    $('#detail .modal-content').html(result);
                    $('#detail').modal('show');
                    console.log('Article details successfully loaded!');
                },
                error: function (error) {
                    console.error('Error loading article details:', error);
                }
            });
        }
    });
</script>